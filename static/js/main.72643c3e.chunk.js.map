{"version":3,"sources":["components/Bulb.js","containers/Bulb.js","components/LightPad.js","containers/LightPad.js","App.js","serviceWorker.js","reducers/lightPad.js","reducers/index.js","index.js"],"names":["Bulb","bulbs","bulbIndex","bulbClick","lightStatus","type","src","value","alt","onClick","bind","this","connect","state","lightPad","dispatch","e","payload","target","LightPad","map","bulb","key","App","className","Boolean","window","location","hostname","match","initialState","Array","fill","lightPadReducer","action","slice","update","$merge","combineReducers","store","createStore","reducer","applyMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAsBeA,MAnBf,YAAgD,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,UAI1BC,EAAeH,EAAMC,GAHT,iFACC,kFAIjB,OACI,oCACI,4BAAI,2BAAOG,KAAK,QAAQC,IAAKF,EAAaG,MAAOL,EAAWM,IAAI,OAAOC,QAASN,EAAUO,KAAKC,WCM5FC,eAdS,SAAAC,GACpB,MAAO,CACHZ,MAAOY,EAAMC,SAASb,UAGH,SAAAc,GACvB,MAAO,CACHZ,UAAY,SAACa,GAAD,OAAOD,EAAS,CACxBV,KAAO,aACPY,QAASD,EAAEE,OAAOX,YAKfK,CAGbZ,GCHamB,MAZf,YAA8B,IAAVlB,EAAS,EAATA,MAChB,OACI,4BACMA,EAAMmB,KAAI,SAACC,EAAMnB,GAAP,OAAqB,kBAAC,EAAD,CAAMoB,IAAKpB,EAAWA,UAAWA,SCM/DU,eAXS,SAAAC,GACpB,MAAO,CACHZ,MAAOY,EAAMC,SAASb,UAGH,SAAAc,GACvB,MAAO,KAKIH,CAGbO,GCJaI,MARf,WACE,OACE,yBAAKC,UAAU,aACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BChBAC,EAAe,CACjB7B,MAAO8B,MAAM,GAAGC,MAAK,IAmBVC,MAhBf,WAAwD,IAA/BpB,EAA8B,uDAAtBiB,EAAcI,EAAQ,uCACnD,OAAQA,EAAO7B,MACX,IAAK,aACD,IAAMJ,EAAQY,EAAMZ,MAAMkC,QAG1B,OAFAlC,EAAMiC,EAAOjB,UAAYhB,EAAMiC,EAAOjB,SAE/BmB,IAAOvB,EAAO,CACjBwB,OACI,CACIpC,WAGhB,QACI,OAAOY,ICfJyB,cAAgB,CAAExB,a,iBCO3ByB,EAAQC,YAAYC,EAASC,YAAgBC,MAEnDC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,QAGRQ,SAASC,eAAe,SHgHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.72643c3e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Bulb({ bulbs, bulbIndex, bulbClick }) {\n    const lightOn = 'http://res.cloudinary.com/dtjoxh5wb/image/upload/v1495532392/on_med_n3p8pd.png';\n    const lightOff = 'http://res.cloudinary.com/dtjoxh5wb/image/upload/v1495532392/off_med_fmma6p.png';\n\n    let lightStatus = (bulbs[bulbIndex]) ? lightOn : lightOff;\n\n    return (\n        <>\n            <li><input type=\"image\" src={lightStatus} value={bulbIndex} alt=\"bulb\" onClick={bulbClick.bind(this)} /></li>\n        </>\n    );\n}\n\nBulb.propTypes = {\n    bulbs: PropTypes.array.isRequired,\n    bulbIndex: PropTypes.number.isRequired,\n    bulbClick: PropTypes.func.isRequired,\n};\n\nexport default Bulb;","import {connect} from 'react-redux';\nimport Bulb from \"../components/Bulb\";\n\nconst mapStateToProps = state => {\n    return {\n        bulbs: state.lightPad.bulbs,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n        bulbClick : (e) => dispatch({\n            type : 'BULB_CLICK',\n            payload: e.target.value,\n        })\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Bulb)","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Bulb from '../containers/Bulb';\n\nfunction LightPad({ bulbs }) {\n    return (\n        <ul>\n            { bulbs.map((bulb, bulbIndex) => <Bulb key={bulbIndex} bulbIndex={bulbIndex} />) }\n        </ul>\n    );\n}\n\nLightPad.propTypes = {\n    bulbs: PropTypes.array.isRequired,\n};\n\nexport default LightPad;","import {connect} from 'react-redux';\nimport LightPad from \"../components/LightPad\";\n\nconst mapStateToProps = state => {\n    return {\n        bulbs: state.lightPad.bulbs,\n    }\n};\nconst mapDispatchToProps = dispatch => {\n    return {\n\n    }\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(LightPad)","import React from 'react';\nimport './App.css';\n\nimport LightPad from './containers/LightPad';\n\nfunction App() {\n  return (\n    <div className=\"light-pad\">\n      <LightPad />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import update from 'immutability-helper';\n\nconst initialState = {\n    bulbs: Array(4).fill(false),\n};\n\nfunction lightPadReducer(state = initialState, action) {\n    switch (action.type) {\n        case 'BULB_CLICK':\n            const bulbs = state.bulbs.slice();\n            bulbs[action.payload] = !bulbs[action.payload];\n\n            return update(state, {\n                $merge:\n                    {\n                        bulbs,\n                    }\n            });\n        default:\n            return state\n    }\n}\nexport default lightPadReducer;\n","import { combineReducers } from 'redux'\n\nimport lightPad from './lightPad';\n\nexport default combineReducers({ lightPad });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore, applyMiddleware} from 'redux'\nimport reducer from './reducers';\nimport {Provider} from 'react-redux';\nimport logger from 'redux-logger';\n\nconst store = createStore(reducer, applyMiddleware(logger));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}